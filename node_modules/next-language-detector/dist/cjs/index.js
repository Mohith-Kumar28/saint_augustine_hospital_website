'use strict';

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var I18NextLanguageDetector = require('i18next-browser-languagedetector');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _objectWithoutProperties__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutProperties);
var I18NextLanguageDetector__default = /*#__PURE__*/_interopDefaultLegacy(I18NextLanguageDetector);

var _excluded = ["supportedLngs", "fallbackLng", "order"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var capitalize = function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
};

var formatLanguageCode = function formatLanguageCode(code) {
  if (typeof code === 'string' && code.indexOf('-') > -1) {
    var specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
    var p = code.split('-');

    if (p.length === 2) {
      p[0] = p[0].toLowerCase();
      p[1] = p[1].toUpperCase();
      if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
    } else if (p.length === 3) {
      p[0] = p[0].toLowerCase();
      if (p[1].length === 2) p[1] = p[1].toUpperCase();
      if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
      if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
      if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
    }

    return p.join('-');
  }

  return code;
};

var getLanguagePartFromCode = function getLanguagePartFromCode(code) {
  if (!code || code.indexOf('-') < 0) return code;
  var p = code.split('-');
  return formatLanguageCode(p[0]);
};

var makeGetBestMatchFromCodes = function makeGetBestMatchFromCodes(_ref) {
  var supportedLngs = _ref.supportedLngs,
      fallbackLng = _ref.fallbackLng;
  return function (codes) {
    if (!codes) return null;

    var isSupportedCode = function isSupportedCode(code) {
      return !supportedLngs || !supportedLngs.length || supportedLngs.indexOf(code) > -1;
    };

    var found;
    codes.forEach(function (code) {
      if (found) return;
      var cleanedLng = formatLanguageCode(code);
      if (!supportedLngs || isSupportedCode(cleanedLng)) found = cleanedLng;
    });

    if (!found && supportedLngs) {
      codes.forEach(function (code) {
        if (found) return;
        var lngOnly = getLanguagePartFromCode(code);

        if (isSupportedCode(lngOnly)) {
          found = lngOnly;
          return;
        }

        found = supportedLngs.find(function (supportedLng) {
          if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
          return undefined;
        });
      });
    }

    if (!found) found = fallbackLng;
    return found;
  };
};

function LanguageDetector() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      supportedLngs = _ref2.supportedLngs,
      fallbackLng = _ref2.fallbackLng,
      _ref2$order = _ref2.order,
      order = _ref2$order === void 0 ? ['querystring', 'cookie', 'localStorage', 'sessionStorage', 'navigator', 'htmlTag'] : _ref2$order,
      rest = _objectWithoutProperties__default["default"](_ref2, _excluded);

  var getBestMatchFromCodes = makeGetBestMatchFromCodes({
    supportedLngs: supportedLngs,
    fallbackLng: fallbackLng
  });
  var languageDetector = new I18NextLanguageDetector__default["default"]({
    languageUtils: {
      getBestMatchFromCodes: getBestMatchFromCodes
    }
  }, _objectSpread({
    order: order
  }, rest));
  return {
    detect: function detect(order) {
      var detectedLngs = languageDetector.detect(order);
      return getBestMatchFromCodes(detectedLngs);
    },
    cache: function cache(lng, caches) {
      return languageDetector.cacheUserLanguage(lng, caches);
    }
  };
}

module.exports = LanguageDetector;
